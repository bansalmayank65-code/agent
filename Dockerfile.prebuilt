# Alternative Dockerfile - Uses pre-built Flutter web files
# This assumes you've already built Flutter web locally and committed the files

FROM eclipse-temurin:17-jdk-alpine AS java-builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache wget dumb-init

# Copy entire backend directory
COPY backend/ ./

# Use pre-built Flutter files (from backend/src/main/resources/static/)
# These should be built locally and committed to git

# Build Spring Boot application
RUN chmod +x mvnw && \
    ./mvnw dependency:go-offline -B && \
    ./mvnw clean package -DskipTests

# Production stage
FROM eclipse-temurin:17-jre-alpine

# Add metadata
LABEL maintainer="bansalmayank65@gmail.com"
LABEL description="Amazon Agentic Workstation - Task orchestration web app"

# Install runtime dependencies
RUN apk add --no-cache dumb-init wget

# Create non-root user for security
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Set working directory
WORKDIR /app

# Copy JAR from java-builder stage
COPY --from=java-builder --chown=appuser:appuser /app/target/agenticworkstation-0.0.1-SNAPSHOT.jar app.jar

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1

# Set JVM options for containerized environment
ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "java $JAVA_OPTS -Dserver.port=${PORT:-8080} -jar app.jar"]